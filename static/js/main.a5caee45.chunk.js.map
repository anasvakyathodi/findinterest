{"version":3,"sources":["components/NavBar.js","components/FormInput.js","components/Form.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","FormInput","value","for","type","placeholder","id","Form","inputValues","map","Button","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAYeA,G,KAVA,WACb,OACE,yBAAKC,UAAU,sBACb,uBAAGC,KAAK,IAAID,UAAU,8BAAtB,oBCcSE,G,KAhBG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACE,yBAAKH,UAAU,kBACb,2BAAOA,UAAU,iBAAiBI,IAAI,QACnCD,GAEH,2BACEH,UAAU,0BACVK,KAAK,SACLC,YAAaH,EACbI,GAAG,YCEIC,EAZF,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACd,OACE,yBAAKT,UAAU,aACb,0BAAMA,UAAU,OACbS,EAAYC,KAAI,SAACP,GAAD,OACf,kBAAC,EAAD,CAAWA,MAAOA,UCGbQ,EARA,WACb,OACE,yBAAKX,UAAU,iDACb,4BAAQA,UAAU,mBAAlB,e,MCgBSY,MAhBf,WAAgB,IAAD,EACyBC,mBAAS,CAC7C,OACA,WACA,SACA,aALW,mBACNJ,EADM,KAOb,OAPa,KAQX,yBAAKT,UAAU,0BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMS,YAAaA,IACnB,kBAAC,EAAD,QCLcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5caee45.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nconst NavBar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark\">\r\n      <a href=\"#\" className=\"navbar-brand text-dark m-3\">\r\n        Find Interest\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst FormInput = ({ value }) => {\r\n  return (\r\n    <div className=\"form-group row\">\r\n      <label className=\"col-form-label\" for=\"rate\">\r\n        {value}\r\n      </label>\r\n      <input\r\n        className=\"form-control text-input\"\r\n        type=\"number\"\r\n        placeholder={value}\r\n        id=\"rate\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport FormInput from \"./FormInput\";\r\nconst Form = ({ inputValues }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <form className=\"p-4\">\r\n        {inputValues.map((value) => (\r\n          <FormInput value={value} />\r\n        ))}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst Button = () => {\r\n  return (\r\n    <div className=\"form-group row justify-content-center bg-dark\">\r\n      <button className=\"btn btn-success\">Calculate</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Form from \"./components/Form\";\nimport Button from \"./components/Button\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nfunction App() {\n  const [inputValues, setInputValues] = useState([\n    \"Rate\",\n    \"Duration\",\n    \"Amount\",\n    \"Interest\",\n  ]);\n  return (\n    <div className=\"App bg-dark text-white\">\n      <NavBar />\n      <Form inputValues={inputValues} />\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}